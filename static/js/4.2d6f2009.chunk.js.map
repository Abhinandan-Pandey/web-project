{"version":3,"sources":["places/pages/UpdatePlace.js"],"names":["UpdatePlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","placeId","useParams","history","useHistory","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","a","process","responseData","place","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","authorization","token","push","userId","className","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled"],"mappings":"oPA0IeA,UAtHK,WAClB,IAAMC,EAAOC,qBAAWC,KADA,EAE8BC,cAA9CC,EAFgB,EAEhBA,UAAWC,EAFK,EAELA,MAAOC,EAFF,EAEEA,YAAaC,EAFf,EAEeA,WAFf,EAGcC,qBAHd,mBAGjBC,EAHiB,KAGJC,EAHI,KAIlBC,EAAUC,cAAYD,QACtBE,EAAUC,cALQ,EAOuBC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GAlBsB,mBAOjBE,EAPiB,KAONC,EAPM,KAOQC,EAPR,KAoBxBC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,+EAEYlB,EAAY,GAAD,OACjCmB,yCADiC,uBACed,IAHtC,OAETe,EAFS,OAKfhB,EAAegB,EAAaC,OAC5BL,EACE,CACEN,MAAO,CACLC,MAAOS,EAAaC,MAAMX,MAC1BE,SAAS,GAEXC,YAAa,CACXF,MAAOS,EAAaC,MAAMR,YAC1BD,SAAS,KAGb,GAjBa,yGAAH,qDAsBhBU,KACC,CAACtB,EAAaK,EAASW,IAE1B,IAAMO,EAAwB,uCAAE,WAAMC,GAAN,SAAAN,EAAA,6DAC9BM,EAAMC,iBADwB,kBAGtBzB,EAAY,GAAD,OACZmB,yCADY,uBACoCd,GACnD,QACAqB,KAAKC,UAAU,CACbjB,MAAOI,EAAUc,OAAOlB,MAAMC,MAC9BE,YAAaC,EAAUc,OAAOf,YAAYF,QAE5C,CACE,eAAgB,mBAChBkB,cAAe,UAAYnC,EAAKoC,QAZR,OAe5BvB,EAAQwB,KAAK,IAAMrC,EAAKsC,OAAS,WAfL,uGAAF,sDAmB9B,OAAIlC,EAEA,yBAAKmC,UAAU,UACb,kBAAC,IAAD,OAKD9B,GAAgBJ,EAWnB,kBAAC,IAAMmC,SAAP,KACA,kBAAC,IAAD,CAAYnC,MAAOA,EAAOoC,QAASlC,KACjCH,GAAaK,GACf,0BAAM8B,UAAU,aAAaG,SAAUb,GACrC,kBAAC,IAAD,CACEc,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS7B,EACT8B,aAAc1C,EAAYO,MAC1BoC,cAAc,IAEhB,kBAAC,IAAD,CACET,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAS7B,EACT8B,aAAc1C,EAAYU,YAC1BiC,cAAc,IAEhB,kBAAC,IAAD,CAAQP,KAAK,SAASS,UAAWlC,EAAUF,SAA3C,kBAlCA,yBAAKqB,UAAU,UACb,kBAAC,IAAD,KACE","file":"static/js/4.2d6f2009.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './PlaceForm.css';\n\n\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/api/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);      \n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true\n            }\n          },\n          true\n        );\n\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler =async event => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/api/places/${placeId}`,\n        'PATCH',\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value\n        }),\n        {\n          'Content-Type': 'application/json',\n          authorization: 'Bearer ' + auth.token,\n        }\n      );\n      history.push('/' + auth.userId + '/places');\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n    <ErrorModal error={error} onClear={clearError} />\n    {!isLoading && loadedPlace && (\n    <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n      <Input\n        id=\"title\"\n        element=\"input\"\n        type=\"text\"\n        label=\"Title\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid title.\"\n        onInput={inputHandler}\n        initialValue={loadedPlace.title}\n        initialValid={true}\n      />\n      <Input\n        id=\"description\"\n        element=\"textarea\"\n        label=\"Description\"\n        validators={[VALIDATOR_MINLENGTH(5)]}\n        errorText=\"Please enter a valid description (min. 5 characters).\"\n        onInput={inputHandler}\n        initialValue={loadedPlace.description}\n        initialValid={true}\n      />\n      <Button type=\"submit\" disabled={!formState.isValid}>\n        UPDATE PLACE\n      </Button>\n    </form>\n    )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n"],"sourceRoot":""}